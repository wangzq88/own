// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/getorder/getorder.proto

package getorder

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GetUserOrder service

func NewGetUserOrderEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GetUserOrder service

type GetUserOrderService interface {
	PostOrder(ctx context.Context, in *PostRequest, opts ...client.CallOption) (*PostResponse, error)
	GetMyOrder(ctx context.Context, in *MyRequest, opts ...client.CallOption) (*MyResponse, error)
	PutOrderStatus(ctx context.Context, in *SetStatusRequest, opts ...client.CallOption) (*SetStatusResponse, error)
	PutOrderComment(ctx context.Context, in *SetCommentRequest, opts ...client.CallOption) (*SetCommentResponse, error)
}

type getUserOrderService struct {
	c    client.Client
	name string
}

func NewGetUserOrderService(name string, c client.Client) GetUserOrderService {
	return &getUserOrderService{
		c:    c,
		name: name,
	}
}

func (c *getUserOrderService) PostOrder(ctx context.Context, in *PostRequest, opts ...client.CallOption) (*PostResponse, error) {
	req := c.c.NewRequest(c.name, "GetUserOrder.PostOrder", in)
	out := new(PostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getUserOrderService) GetMyOrder(ctx context.Context, in *MyRequest, opts ...client.CallOption) (*MyResponse, error) {
	req := c.c.NewRequest(c.name, "GetUserOrder.GetMyOrder", in)
	out := new(MyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getUserOrderService) PutOrderStatus(ctx context.Context, in *SetStatusRequest, opts ...client.CallOption) (*SetStatusResponse, error) {
	req := c.c.NewRequest(c.name, "GetUserOrder.PutOrderStatus", in)
	out := new(SetStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getUserOrderService) PutOrderComment(ctx context.Context, in *SetCommentRequest, opts ...client.CallOption) (*SetCommentResponse, error) {
	req := c.c.NewRequest(c.name, "GetUserOrder.PutOrderComment", in)
	out := new(SetCommentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GetUserOrder service

type GetUserOrderHandler interface {
	PostOrder(context.Context, *PostRequest, *PostResponse) error
	GetMyOrder(context.Context, *MyRequest, *MyResponse) error
	PutOrderStatus(context.Context, *SetStatusRequest, *SetStatusResponse) error
	PutOrderComment(context.Context, *SetCommentRequest, *SetCommentResponse) error
}

func RegisterGetUserOrderHandler(s server.Server, hdlr GetUserOrderHandler, opts ...server.HandlerOption) error {
	type getUserOrder interface {
		PostOrder(ctx context.Context, in *PostRequest, out *PostResponse) error
		GetMyOrder(ctx context.Context, in *MyRequest, out *MyResponse) error
		PutOrderStatus(ctx context.Context, in *SetStatusRequest, out *SetStatusResponse) error
		PutOrderComment(ctx context.Context, in *SetCommentRequest, out *SetCommentResponse) error
	}
	type GetUserOrder struct {
		getUserOrder
	}
	h := &getUserOrderHandler{hdlr}
	return s.Handle(s.NewHandler(&GetUserOrder{h}, opts...))
}

type getUserOrderHandler struct {
	GetUserOrderHandler
}

func (h *getUserOrderHandler) PostOrder(ctx context.Context, in *PostRequest, out *PostResponse) error {
	return h.GetUserOrderHandler.PostOrder(ctx, in, out)
}

func (h *getUserOrderHandler) GetMyOrder(ctx context.Context, in *MyRequest, out *MyResponse) error {
	return h.GetUserOrderHandler.GetMyOrder(ctx, in, out)
}

func (h *getUserOrderHandler) PutOrderStatus(ctx context.Context, in *SetStatusRequest, out *SetStatusResponse) error {
	return h.GetUserOrderHandler.PutOrderStatus(ctx, in, out)
}

func (h *getUserOrderHandler) PutOrderComment(ctx context.Context, in *SetCommentRequest, out *SetCommentResponse) error {
	return h.GetUserOrderHandler.PutOrderComment(ctx, in, out)
}
